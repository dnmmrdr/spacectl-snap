name: Build Snap

on:
  schedule:
    - cron: '0 */12 * * *'

  workflow_dispatch:

jobs:
  detect-version:
    runs-on: ubuntu-latest

    outputs:
      latest_tag: ${{ steps.get-latest-release.outputs.latest_tag }}
      run_build: ${{ steps.check.outputs.run_build }}
      download_urls: ${{ steps.get-latest-release.outputs.download_urls }}

    steps:
      - name: Get latest tag from another repo
        id: get-latest-release
        run: |
          curl -o output.json -s -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" https://api.github.com/repos/spacelift-io/spacectl/releases
          latest_tag=$(cat output.json | jq -r '.[0].name' | sed s/v//g | tr -d '\n')
          download_urls=$(cat output.json | jq -r '.[0].assets.[].browser_download_url' | grep linux | grep amd64)
          echo "download_urls=$download_urls" >> $GITHUB_OUTPUT
          echo "latest_tag=$latest_tag" >> $GITHUB_OUTPUT

      - name: Restore last built release (cache)
        id: cache-last-release
        uses: actions/cache@v4
        with:
          path: .last_release
          key: last-release-${{ steps.get-latest-release.outputs.latest_tag }}

      - name: Compare with cached release
        id: check
        run: |
          LATEST_TAG="${{ steps.get-latest-release.outputs.latest_tag }}"
          if [ -f .last_release ]; then
            LAST_TAG=$(cat .last_release)
          else
            LAST_TAG=""
            echo "" > .last_release 
          fi

          echo "Latest upstream tag: $LATEST_TAG"
          echo "Last built tag: $LAST_TAG"

          if [ "$LATEST_TAG" = "$LAST_TAG" ]; then
            echo "No new release found. Exiting."
            echo "run_build=false" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "run_build=true" >> $GITHUB_OUTPUT
          fi

          # Save the new tag so it gets cached at the end of the job
          echo $LATEST_TAG > .last_release

  build-snap:
    runs-on: ubuntu-latest
    needs: detect-version
    if: ${{ needs.detect-version.outputs.run_build  == 'true' }}

    outputs:
      snap_path: ${{ steps.build-snap.outputs.snap }}

    steps:
      - name: Checkout current code
        uses: actions/checkout@v5

      - name: Update Snap version dynamically
        run: |
          sed -i "s/^version: .*/version: ${{ needs.detect-version.outputs.latest_tag }}/" snap/snapcraft.yaml
          cat snap/snapcraft.yaml

      - name: Update download url dynamically
        run: |
          ESCAPED_REPLACE=$(printf '%s\n' "${{ needs.detect-version.outputs.download_urls }}" | sed -e 's/[\/&]/\\&/g')
          sed -i "s/source: .*/source: $ESCAPED_REPLACE/" snap/snapcraft.yaml
          cat snap/snapcraft.yaml

      - name: Build Snap
        uses: snapcore/action-build@v1
        id: build-snap

      - name: Publish Snap
        uses: snapcore/action-publish@v1
        env:
          SNAPCRAFT_STORE_CREDENTIALS: ${{ secrets.SNAP_STORE_LOGIN }}
        with:
          snap: "${{ steps.build-snap.outputs.snap }}"
          release: stable

  create-pr:
    runs-on: ubuntu-latest
    needs: 
      - build-snap
      - detect-version
    
    steps:
      - name: Create Pull Request
        id: cpr
        uses: peter-evans/create-pull-request@v7
        with:
          commit-message: "Upgrade version to ${{ needs.detect-version.outputs.latest_tag }}"
          committer: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
          author: ${{ github.actor }} <${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com>
          signoff: false
          branch: "upgrade_version_${{ needs.detect-version.outputs.latest_tag }}"
          delete-branch: true
          title: "Upgrade version to ${{ needs.detect-version.outputs.latest_tag }}"
          body: |
            Automatic PR created after pushing new version to snap store
            Version: ${{ needs.detect-version.outputs.latest_tag }}
            Upstream URL: ${{ needs.detect-version.outputs.download_urls }}
          labels: |
            automated pr
          draft: false
          add-paths: |
            ${{ needs.build-snap.outputs.snap_path }}